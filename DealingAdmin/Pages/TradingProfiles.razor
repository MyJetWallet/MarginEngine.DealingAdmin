@page "/TradingProfiles"

@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;

<PageHeader Class="m-0 p-0" Title="Trading Profiles">
    <PageHeaderExtra>
        <AntDesign.Button OnClick="ShowNewProfileDialog" Type="@AntDesign.ButtonType.Primary">New Profile</AntDesign.Button>
    </PageHeaderExtra>
</PageHeader>

<Table DataSource="@tradingProfiles"
       TItem="TradingProfileModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 120px)"
       PageSize="999">
    <RowTemplate>           
        <AntDesign.Column Title="Id"
                DataIndex="Id"
                TData="string"
                Sortable
                Width="200"/>
        <AntDesign.Column Title="Margin Call %" 
                DataIndex="MarginCallPercent" 
                TData="int"
                Sortable
                Width="100"/>
        <AntDesign.Column Title="Stop out %"
                DataIndex="StopOutPercent" 
                TData="int"
                Sortable
                Width="100"/>
        <AntDesign.Column Title="Topping up %"
                DataIndex="PositionToppingUpPercent"
                TData="int"
                Sortable
                Width="100"/>
        <AntDesign.Column Title="Instruments"
                TData="string">
            @foreach (var instrument in context.Instruments)
            {
                <Tag PresetColor="PresetColor.Purple">@instrument.Id</Tag>
            }
        </AntDesign.Column>    
        <ActionColumn Title="Edit" Width="60">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
        </ActionColumn>
    </RowTemplate>
</Table>


@code {
    private IEnumerable<TradingProfileModel> tradingProfiles;

    int _pageSize = 999;

    private bool isLoading = false;
    private bool isUpdateProfileDialogVisible = false;

    private TradingProfileModel editedProfile;
    private string profileEditFormTitle;
    private bool isEditInstrumentDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() => RefreshData());
    }

    private async Task RefreshData()
    {
        isLoading = true;

         tradingProfiles = (await liveDemoServices.GetContext(AppState.IsLive)
            .TradingProfileRepository.GetAllAsync()).Select(TradingProfileModel.Create);

        isLoading = false;

        this.StateHasChanged();
    }

    void OnChange(QueryModel<TradingProfileModel> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));
    }

    private void ShowNewProfileDialog()
    {
        profileEditFormTitle = "Add New Instrument";
        editedProfile = new TradingProfileModel();
        isEditInstrumentDialogVisible = true;
    }

    private void ShowEditInstrumentDialog(TradingProfileModel profile)
    {
        profileEditFormTitle = $"Edit '{profile.Id}' Profile";
        editedProfile = profile;
        isEditInstrumentDialogVisible = true;
    }

    private void CloseEditProfileDialog()
    {
        isEditInstrumentDialogVisible = false;
        editedProfile = new TradingProfileModel();
    }
}
