@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Microsoft.AspNetCore.Components
@using SimpleTrading.Abstraction.Markups
@using SimpleTrading.Abstraction.Trading.Profiles
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Abstraction.Trading.Swaps
@using SimpleTrading.Abstractions.Common.InstrumentsAvatar
@using SimpleTrading.Common.MyNoSql.InstrumentsAvatar

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;
@inject ISwapProfileWriter swapProfileWriter;
@inject IMarkupProfilesRepository markupProfilesRepository

<Form Model="TradingGroup"        
      LabelColSpan="6"
      WrapperColSpan="12">
    <FormItem Label="Id" Required>
        <Input @bind-Value="@context.Id" Placeholder="Group Id" Disabled="@(!String.IsNullOrEmpty(context.Id))"/>
    </FormItem>            
    <FormItem Label="Name" Required>
        <Input @bind-Value="@context.Name" Placeholder="Name" />
    </FormItem>
    <FormItem Label="Markup Profile Id" Required>
         <Select @bind-Value="@context.MarkupProfileId"
                TItemValue="string"
                TItem="string">
            <SelectOptions>
                @foreach (var profile in markupProfiles)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@profile.ProfileId Label=@profile.ProfileId/>
                }
            </SelectOptions>
        </Select>
    </FormItem>
    <FormItem Label="Trading Profile Id" Required>
        <Select @bind-Value="@context.TradingProfileId"
                TItemValue="string"
                TItem="string">
            <SelectOptions>
                @foreach (var profile in tradingProfiles)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@profile.Id Label=@profile.Id/>
                }
            </SelectOptions>
        </Select>
    </FormItem>
    <FormItem Label="Swap Profile Id" Required>
         <Select @bind-Value="@context.SwapProfileId"
                TItemValue="string"
                TItem="string">
            <SelectOptions>
                @foreach (var item in swapProfiles)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@item.Id Label=@item.Id/>
                }
            </SelectOptions>
        </Select>
    </FormItem> 
    <FormItem Label="API Key" Required>
        <InputPassword @bind-Value="@context.TokenKey" />
    </FormItem>
</Form>
 
@code {
    [Parameter]
    public TradingGroupModel TradingGroup { get; set; } = new();

    [Parameter]
    public EventCallback<TradingGroupModel> TradingGroupChanged { get; set; }

    private IEnumerable<ITradingProfile> tradingProfiles { get; set; } = new List<ITradingProfile>();
    private IEnumerable<IMarkupProfile> markupProfiles { get; set; } = new List<IMarkupProfile>();
    private IEnumerable<ISwapProfile> swapProfiles { get; set; } = new List<ISwapProfile>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("TradingGroupEditForm  >> OnInitializedAsync >> START"); /// REMOVE AFTER TEST!!!
        tradingProfiles = await liveDemoServices.GetContext(AppState.IsLive)
            .TradingProfileRepository.GetAllAsync();
        swapProfiles = await swapProfileWriter.GetAllAsync();
        markupProfiles = await markupProfilesRepository.GetAllAsync();
        Console.WriteLine("TradingGroupEditForm  >> OnInitializedAsync >> END"); /// REMOVE AFTER TEST!!!
    }

    public async Task UpdateEditedInstrument()
    {
        Console.WriteLine("TradingGroupEditForm  >> UpdateEditedInstrument >> START"); /// REMOVE AFTER TEST!!!
        await TradingGroupChanged.InvokeAsync(TradingGroup);
        Console.WriteLine("TradingGroupEditForm  >> UpdateEditedInstrument >> END"); /// REMOVE AFTER TEST!!!
    }
}