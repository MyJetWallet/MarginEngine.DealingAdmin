@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.Instruments.Forms
@using DealingAdmin.Shared.Models
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup
@using SimpleTrading.Abstraction.Trading.Swaps
@using SimpleTrading.Common.Abstractions.DefaultValues
@using SimpleTrading.Common.Abstractions.InstrumentsAvatar
@using SimpleTrading.Common.Abstractions.Images
@using SimpleTrading.Common.MyNoSql.InstrumentsAvatar
@using SimpleTrading.MyNoSqlRepositories.InstrumentSourcesMaps
@using SimpleTrading.QuotesFeedRouter.Abstractions
@using static DealingAdmin.FormatUtils

@inject IInstrumentSubGroupsRepository SubGroupsRepository
@inject IInstrumentGroupsRepository GroupsRepository
@inject ITradingInstrumentsRepository InstrumentsRepository
@inject TradingInstrumentMyNoSqlRepository avatarRepository
@inject InstrumentSourcesMapsMyNoSqlRepository sourcesMapsRepository
@inject TradingInstrumentMyNoSqlRepository imagesMyNoSqlRepository
@inject IDefaultValuesRepository defValuesRepository
@inject ILiquidityProviderReader liquidityProviderReader
@inject IDefaultLiquidityProviderWriter defLiquidityProviderWriter
@inject ISwapProfileWriter SwapProfileWriter
@inject AdminAppSettings appSettings
@inject ISnackbar snackbar 
@inject Logger logger

<PageHeader Class="mb-2 p-0" Title="Instruments">
    <PageHeaderExtra>
        <AntDesign.Button 
            OnClick="ShowNewInstrumentDialog" 
            Type="@AntDesign.ButtonType.Primary"
            Class="btn-text">New Instrument</AntDesign.Button>
    </PageHeaderExtra>
</PageHeader>
<Table DataSource="@tradingInstruments"
       TItem="TradingInstrumentViewModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 200px)"
       PageSize="999">
    <RowTemplate>
        <AntDesign.Column Title="Group"
                TData="string"
                DataIndex="GroupId"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Id"
                TData="string"
                DataIndex="Id"
                Sortable>
            <p>Id: <b>@context.Id</b></p>
            <p>Name: <b>@context.Name</b></p>
        </AntDesign.Column>
        <AntDesign.Column Title="Weight"
            TData="int?"
            DataIndex="Weight"
            Sortable
            Width="80"/>
        <AntDesign.Column Title="Sub group" 
                DataIndex="SubGroupId" 
                TData="string"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Avatar"
                TData="string"
                Width="80">
            <a @onclick="()=>ShowEditAvatarDialog(context)">
                @if (dictAvatars[context.Id].ContainsKey(ImageTypes.SVG))
                {
                    <Image Preview="@false" 
                        Src="@($"{FormatUtils.ImageSvgDataPrefix}{dictAvatars[context.Id][ImageTypes.SVG].Avatar}")"/>
                }
                else if (dictAvatars[context.Id].ContainsKey(ImageTypes.PNG))
                {
                    <Image Preview="@false" 
                        Src="@($"{FormatUtils.ImagePngDataPrefix}{dictAvatars[context.Id][ImageTypes.PNG].Avatar}")"/>
                }
                else if (!String.IsNullOrEmpty(defaultAvatarSvgSrc))
                {
                    <Image Preview="@false" Src="@defaultAvatarSvgSrc"/>
                }
                else if (!String.IsNullOrEmpty(defaultAvatarPngSrc))
                {
                    <Image Preview="@false" Src="@defaultAvatarPngSrc"/>
                }
                else
                {
                    <div>Default</div>
                }
            </a>
        </AntDesign.Column>
        <AntDesign.Column Title="Base"
                DataIndex="Base" 
                TData="string"
                Sortable
                Width="80"/>
        <AntDesign.Column Title="Quote"
                DataIndex="Quote"
                TData="string"
                Sortable
                Width="80"/>
        <AntDesign.Column Title="Digits" 
                DataIndex="Digits" 
                TData="int"
                Sortable
                Width="72"/>
        <AntDesign.Column Title="Swap"
                DataIndex="SwapScheduleId"
                TData="string"
                Width="72">
            @if (String.IsNullOrEmpty(context.SwapScheduleId))
            {
                <i class="material-icons color-crimson font-18">warning_amber</i>
            }
            else
            {
                <span>@context.SwapScheduleId</span>
            }
        </AntDesign.Column>
        <AntDesign.Column Title="Liquidity Provider" 
                TData="string"
                Width="90">
            <a @onclick="()=>ShowEditLiquidityProviderDialog(context)">
                <Tag Class="@GetLiquidityProviderTagClass(@context.DefaultLiquidityProvider)">
                    @(String.IsNullOrEmpty(context.LiquidityProviderId) ? defaultLP : context.LiquidityProviderId)
                </Tag>
            </a>
        </AntDesign.Column>
        <AntDesign.Column Title="Time off"
                TData="string"
                Width="220">
            @foreach(var item in context.DaysOff)
            {
                <p>@(FormatUtils.GetDayOffText(item))</p>
            }
        </AntDesign.Column>
        <AntDesign.Column Title="On/Off"
                TData="bool"
                Field="@context.TradingDisabled"
                Sortable
                Width="72">
            <AntDesign.Button
                Class="@GetTradingDisableColor(context.TradingDisabled)"
                OnClick="()=>ShowTradingDisableDialog(context)"
                Shape="@ButtonShape.Circle"
                Icon="@IconType.Outline.Poweroff"/>
        </AntDesign.Column>
        <AntDesign.Column Title="Price"
                TData="string"
                Width="160">
            <InstrumentBidAsk InstrumentId="@context.Id" InstrumentDigits="@context.Digits"/>
        </AntDesign.Column>
        <AntDesign.Column Title="Timeout"
                TData="string" 
                Width="120">
            Night:<Tag PresetColor="PresetColor.Purple">@context.NightTimeout</Tag>
            Day:<Tag PresetColor="PresetColor.GeekBlue">@context.DayTimeout</Tag>
        </AntDesign.Column>        
        <ActionColumn Title="Edit" Width="60">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
        </ActionColumn>
    </RowTemplate>
</Table>
   
<Modal Title="@instrumentEditFormTitle"
       Visible="@isEditInstrumentDialogVisible"
       OkText="@("Save")"
       OnOk="()=>SaveInstrument()"
       OnCancel="()=>CloseEditInstrumentDialog()"
       Width="900">
    <TradingInstrumentEditForm
        Instrument="editedInstrument"
        InstrumentGroups="instrumentGroups" 
        SubGroups="instrumentSubGroups"
        SwapProfiles="swapProfiles"/>   
</Modal>

<Modal Title="@instrumentEditLiquidityProviderTitle"
       Visible="@isEditLiquidityProvidertDialogVisible"
       Footer=@null
       Closable=@false
       Width="320">
    <div class="m-1">Liquidity Provider:</div>
    <Select DataSource="@liquidityProvidersViewList"
            @bind-Value="@editedLiquidityProviderId"
	        TItemValue="string"
	        TItem="ViewListItem"
            LabelName="Text"
            ValueName="Value"
            Style="width:220px"
            DropdownMaxWidth="200"/>
    <AntDesign.Row Class="center-middle py-3">
        <Col Span="4">
        </Col>    
        <Col Span="10">
            <AntDesign.Button OnClick="SaveLiquidityProvider"
                Class="btn-text bg-color-aquamarine">
                Save
            </AntDesign.Button>
        </Col>    
        <Col Span="10">
            <AntDesign.Button OnClick="CloseEditLiquidityProviderDialog"
                Class="btn-text bg-color-light-yellow">
                Cancel
            </AntDesign.Button>
        </Col>
    </AntDesign.Row>
</Modal>

<Modal Title="@tradingDisableDialogTitle"
       Visible="@isTradingDisableDialogVisible"
       OkText="@("Save")"
       OnOk="()=>SaveTradingDisable()"
       OnCancel="()=>CloseTradingDisableDialog()"
       Width="600">
    <AntDesign.Row Class="center-middle">
        <Switch @bind-Value="@isTradingDisabled"></Switch><span class="px-3">Disable Trading</span>
    </AntDesign.Row>
    <AntDesign.Row Class="center-middle">
       <span class="px-2">API Key:</span><InputPassword @bind-Value="@disableTradingApiKey" />
    </AntDesign.Row>
</Modal>

<Modal Title="@avatarEditFormTitle"
       Visible="@isEditAvatartDialogVisible"
       Footer=@null
       Closable=@false
       Width="640">
    <Card Title="Current Instrument Avatar" Class="my-2" Style="width: 600px;">
        <Body>
            <CardGrid Style="width:50%;text-align:center">
                <div>Current SVG Avatar:</div>
                @if (dictAvatars[editedInstrument.Id].ContainsKey(ImageTypes.SVG))
                {
                    <Image Preview="@false" Width="150px"
                        Src="@($"{FormatUtils.ImageSvgDataPrefix}{dictAvatars[editedInstrument.Id][ImageTypes.SVG].Avatar}")"/>
                }
            </CardGrid>
            <CardGrid Style="width:50%;text-align:center">
                <div>Current PNG Avatar:</div>
                @if (dictAvatars[editedInstrument.Id].ContainsKey(ImageTypes.PNG))
                {
                    <Image Preview="@false" Width="150px"
                        Src="@($"{FormatUtils.ImagePngDataPrefix}{dictAvatars[editedInstrument.Id][ImageTypes.PNG].Avatar}")"/>
                }
            </CardGrid>
            <CardGrid Style="width:100%;" Class="my-3">
                <AntDesign.Row>
                    <Col Span="18">
                        <div>Pick an image (svg/png) for new avatar:</div>
                        <InputFile AdditionalAttributes=@imageAcceptFilterDict OnChange="@ImageFileChanged"/>
                    </Col>
                    <Col Span="6">
                        <AntDesign.Button Icon="upload"
                            Type="primary"
                            Class="btn-text"
                            OnClick="@UploadAvatarImage"
                            Disabled="@(imageFile == null)">
                                <span>Upload</span>
                        </AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </CardGrid>
            <CardGrid Style="width:100%;">
                <AntDesign.Row>
                </AntDesign.Row>
                <AntDesign.Row>
                    <Col Span="20">
                    </Col>   
                    <Col Span="4">
                        <AntDesign.Button OnClick="CloseEditAvatarDialog" Class="btn-text">
                            Close
                        </AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </CardGrid>
        </Body>
    </Card>
</Modal>

@code {
    private List<TradingInstrumentViewModel> tradingInstruments;
    private IEnumerable<InstrumentGroupModel> instrumentGroups;
    private IEnumerable<InstrumentSubGroupModel> instrumentSubGroups;
    private IEnumerable<ISwapProfile> swapProfiles;
    private List<ViewListItem> liquidityProvidersViewList;

    private bool isLoading = false;
    private TradingInstrumentViewModel editedInstrument;
    private string instrumentEditFormTitle;
    private string tradingDisableDialogTitle;
    private bool isEditInstrumentDialogVisible;
    private bool isEditLiquidityProvidertDialogVisible;
    private bool isEditAvatartDialogVisible;
    private bool isTradingDisableDialogVisible;
    private bool isTradingDisabled;
    private string disableTradingApiKey;
    private string defaultLP;
    private string defaultLpListItem;
    private List<InstrumentSourcesMapsMyNoSqlTableEntity> sourcesMapsList;
    private string instrumentEditLiquidityProviderTitle;
    private string avatarEditFormTitle;
    private string editedLiquidityProviderId;

    private Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>> dictAvatars
        = new Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>>();

    Dictionary<string, object> imageAcceptFilterDict = new Dictionary<string, object>()
    {
         { "accept", "image/png, image/svg+xml" }
    };

    string defaultAvatarSvgSrc;
    string defaultAvatarPngSrc;
    IBrowserFile imageFile;

    protected override async Task OnInitializedAsync()
    {
        instrumentSubGroups = (await SubGroupsRepository.GetAllAsync()).Select(InstrumentSubGroupModel.Create);
        instrumentGroups = (await GroupsRepository.GetAllAsync()).Select(InstrumentGroupModel.Create);
        swapProfiles = await SwapProfileWriter.GetAllAsync();
        await RefreshData();
        await RefreshAvatars();
    }

    private async Task RefreshData()
    {
        isLoading = true;

        defaultLP = await defLiquidityProviderWriter.GetAsync();
        var liquidityProviders = await liquidityProviderReader.GetLiquidityProviders();
        liquidityProvidersViewList = new List<ViewListItem>();
        liquidityProvidersViewList.Add(new ViewListItem { Text = $"Default ({defaultLP})", Value = String.Empty });
        liquidityProviders.ForEach(item =>
            liquidityProvidersViewList.Add(new ViewListItem { Text = item, Value = item }));

        sourcesMapsList = (await sourcesMapsRepository.GetAllAsync()).ToList();
        var instruments = await InstrumentsRepository.GetAllAsync();
        tradingInstruments = new List<TradingInstrumentViewModel>();

        foreach (var inst in instruments)
        {
            var provider = GetLiquidityProviderIdForInstrument(inst.Id);

            tradingInstruments.Add(TradingInstrumentViewModel.Create(
                inst,
                provider,
                String.IsNullOrEmpty(provider)));
        }

        isLoading = false;
    }

    private async Task RefreshAvatars()
    {
        isLoading = true;

        var defaultAvatarSvg = await defValuesRepository.GetTradingInstrumentAvatarSvgAsync();
        var defaulAvatarPng = await defValuesRepository.GetTradingInstrumentAvatarPngAsync();
        defaultAvatarSvgSrc = $"{FormatUtils.ImageSvgDataPrefix}{defaultAvatarSvg}";        
        defaultAvatarPngSrc = $"{FormatUtils.ImagePngDataPrefix}{defaulAvatarPng}";

        dictAvatars = new Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>>();

        var instruments = await InstrumentsRepository.GetAllAsync();

        foreach (var inst in instruments)
        {
            await InitAvatarById(inst.Id);
        }

        isLoading = false;
    }

    private async Task InitAvatarById(string instrumentId)
    {
        var avatarSvg = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, ImageTypes.SVG);
        var avatarPng = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, ImageTypes.PNG);

        dictAvatars.Add(instrumentId, new Dictionary<ImageTypes, ITradingInstrumentsAvatar>());

        if (avatarSvg != null)
        {
            dictAvatars[instrumentId].Add(ImageTypes.SVG, avatarSvg);
        }

        if (avatarPng != null)
        {
            dictAvatars[instrumentId].Add(ImageTypes.PNG, avatarPng);
        }
    }

    private async Task RefreshAvatarById(string instrumentId, ImageTypes imgType)
    {
        var avatar = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, imgType);

        if (!dictAvatars.ContainsKey(instrumentId))
        {
            dictAvatars.Add(instrumentId, new Dictionary<ImageTypes, ITradingInstrumentsAvatar>());
        }

        if (avatar != null)
        {
            if (dictAvatars[instrumentId].ContainsKey(imgType))
            {
                dictAvatars[instrumentId][imgType] = avatar;
            }
            else
            {
                dictAvatars[instrumentId].Add(imgType, avatar);
            }
        }
    }

    private string GetLiquidityProviderIdForInstrument(string instrumentId)
    {
        var overwrittenProviderId = sourcesMapsList.FirstOrDefault(x => x.InstrumentId == instrumentId)?.SourceId;

        return String.IsNullOrEmpty(overwrittenProviderId)
            ? String.Empty
            : overwrittenProviderId;
    }

    private string GetLiquidityProviderTagClass(bool isDefaultProvider)
    {
        return isDefaultProvider ? "btn-text tag-color-gray" : "btn-text tag-color-orange";
    }

    private string GetTradingDisableColor(bool isTradingDisabled)
    {
        return isTradingDisabled ? "bg-color-darkred" : "bg-color-green";
    }

    private void ShowEditLiquidityProviderDialog(TradingInstrumentViewModel lpInstrument)
    {
        editedInstrument = lpInstrument;
        editedLiquidityProviderId = lpInstrument.DefaultLiquidityProvider ? String.Empty : lpInstrument.LiquidityProviderId;
        instrumentEditLiquidityProviderTitle = $"Update Liquidity Provider for '{lpInstrument.Name}'";
        isEditLiquidityProvidertDialogVisible = true;
    }

    private void ShowEditAvatarDialog(TradingInstrumentViewModel avatarInstrument)
    {
        editedInstrument = avatarInstrument;
        isEditAvatartDialogVisible = true;
    }

    private void ImageFileChanged(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadAvatarImage()
    {
        try
        {
            var maxFileSizeInMb = 5;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (imageFile == null)
            {
                snackbar.Add("Choose a file to upload", Severity.Warning);
                return;
            }

            if (imageFile.Size > fileSizeInBytes)
            {
                snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            var fileExtension = imageFile.Name.Substring(imageFile.Name.LastIndexOf('.') + 1);

            ImageTypes? imageType = fileExtension.ToLower() switch 
            {
                "svg" => ImageTypes.SVG,
                "png" => ImageTypes.PNG,
                _ => null
            };

            if (imageType == null)
            {
                snackbar.Add("File Extension is not svg/png", Severity.Warning);
                return;
            }

            var imgArray = await CommonUtils.FileToBytesAsync(imageFile);
            var avatarStr = Convert.ToBase64String(imgArray);

            await imagesMyNoSqlRepository.UpdateAsync(editedInstrument.Id, avatarStr, imageType.Value);
            snackbar.Add($"New {imageType.Value.ToString()} avatar for '{editedInstrument.Name}' saved", Severity.Success);
            await RefreshAvatarById(editedInstrument.Id, imageType.Value);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error during saving new avatar for '{editedInstrument.Name}': {ex.Message}", Severity.Error);
        }

    }

    private async Task SaveLiquidityProvider()
    {
        try
        {
            if (editedInstrument == null || String.IsNullOrEmpty(editedInstrument.Id))
            { 
                snackbar.Add($"InstrumentId is empty. Try again. '{editedInstrument.Id}' set to default", Severity.Warning);
            }

            if (String.IsNullOrEmpty(editedLiquidityProviderId))
            {
                await sourcesMapsRepository.Delete(editedInstrument.Id);
                snackbar.Add($"Liquidity Provider for Instrument '{editedInstrument.Id}' set to default", Severity.Success);
            }
            else
            {
                await sourcesMapsRepository.UpdateAsync(new QuoteSourceModel
                    {
                        InstrumentId = editedInstrument.Id,
                        SourceId = editedLiquidityProviderId
                    });

                isEditLiquidityProvidertDialogVisible = false;
                snackbar.Add($"Liquidity Provider for Instrument '{editedInstrument.Id}' set to '{editedLiquidityProviderId}", Severity.Success);

                await RefreshData();
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }

    private void CloseEditLiquidityProviderDialog()
    {
        isEditLiquidityProvidertDialogVisible = false;
    }

    private void ShowTradingDisableDialog(TradingInstrumentViewModel instrument)
    {
        editedInstrument = instrument;
        disableTradingApiKey = "";
        tradingDisableDialogTitle = $"Disable Trading for '{instrument.Name}'";
        isTradingDisableDialogVisible = true;
    }

    private async Task SaveTradingDisable()
    {
        try
        {
            if (editedInstrument == null || String.IsNullOrEmpty(editedInstrument.Id))
            { 
                snackbar.Add($"InstrumentId is empty. Try again.", Severity.Warning);
            }

            if (disableTradingApiKey != appSettings.AdminCrudApiKey)
            {
                snackbar.Add($"API Key is not valid", Severity.Error);
                return;
            }

            editedInstrument.TradingDisabled = isTradingDisabled;
            await InstrumentsRepository.UpdateAsync(editedInstrument);
            snackbar.Add($"Trading setting for Instrument '{editedInstrument.Id}' updated", Severity.Success);
            CloseTradingDisableDialog();
            await RefreshData();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }

    private void CloseTradingDisableDialog()
    {
        isTradingDisableDialogVisible = false;
        disableTradingApiKey = "";
        editedInstrument = null;
    }

    private void ShowNewInstrumentDialog()
    {
        instrumentEditFormTitle = "Add New Instrument";
        editedInstrument = new TradingInstrumentViewModel()
            {
                DaysOff = new List<TradingInstrumentDayOffModel>()
            };
        isEditInstrumentDialogVisible = true;
    }

    private void ShowEditInstrumentDialog(TradingInstrumentViewModel instr)
    {
        avatarEditFormTitle = $"Edit Avatar for '{instr.Name}'";
        isEditAvatartDialogVisible = true;
    }

    private void CloseEditAvatarDialog()
    {
        isEditAvatartDialogVisible = false;        
    }

    private void CloseEditInstrumentDialog()
    {
        isEditInstrumentDialogVisible = false;
        editedInstrument = null;
    }

    private async void SaveInstrument()
    {
        try
        {
            await InstrumentsRepository.UpdateAsync(editedInstrument);
            isEditInstrumentDialogVisible = false;
            snackbar.Add($"Instrument '{editedInstrument.Id}' saved", Severity.Success);
            await RefreshData();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }
}