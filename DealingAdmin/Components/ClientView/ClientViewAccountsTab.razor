@using System.ComponentModel
@using AntDesign.TableModels
@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Services
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.Caches.ActiveOrders
@using SimpleTrading.Abstraction.Trading
@using SimpleTrading.Abstraction.Trading.BalanceOperations
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Engine.Grpc.Contracts

@inject StateManager AppState
@inject LiveDemoServiceMapper LiveDemoServices
@inject IUserMessageService MessageService
@inject AdminAppSettings appSettings
@inject Serilog.Core.Logger logger
@inject ModalService modalService


<Table  DataSource="@GridData"
        TItem="TradingAccountModel"
        Loading="@isLoading"
        Bordered="@true"
        Total="0"
        HidePagination="@true"
        ScrollY="calc(100vh - 260px)"
        PageSize="999">
    <RowTemplate> 
        <Column Title="Account"
                TData="string"
                @bind-Field="@context.AccountId"
                Sortable
                Filterable/>
        <Column Title="Currency"
                TData="string"
                @bind-Field="@context.Currency"
                Width="120"/>
        <Column Title="Balance"
                TData="double"
                @bind-Field="@context.Balance"/>
        <Column Title="Real Funds"
                @bind-Field="@context.Balance"/>
        <Column Title="Bonus"
                @bind-Field="@context.Bonus"/>
        <Column Title="Real Funds"
                @bind-Field="@context.Balance"/>                
        <Column Title="Trading Group"
                TData="string"
                @bind-Field="@context.TradingGroup"/>
        <ActionColumn Title="Actions" Width="120">
            <div>
                <i class="material-icons-outlined color-primary md-18 vertical-baseline"></i>
                <i><span class="material-icons-outlined color-primary md-18 vertical-baseline"
                      @onclick="()=>ShowUpdateBalanceDialog(context.AccountId)">
                      account_balance_wallet
                </span></i>
                <span class="material-icons-outlined color-primary md-18 vertical-baseline">
                    list_alt
                </span>
            </div>
        </ActionColumn>
    </RowTemplate>
</Table>

<Modal Title="Update Balance"
       Visible="@isUpdateBalanceDialogVisible"
       OkText="@("Confirm")"
       OnOk="()=>UpdateBalance()"
       OnCancel="()=>CloseUpdateBalanceDialog()">
    <Form Model="formUpdateBalance"
          LabelColSpan="8"
          WrapperColSpan="16">
        <FormItem Label="Trader Id" >
            <Input @bind-Value="@context.TraderId" Disabled="@true" ReadOnly="@true" />
        </FormItem>
        <FormItem Label="Account Id" >
            <Input @bind-Value="@context.AccountId" Disabled="@true" ReadOnly="@true" />
        </FormItem>
        <FormItem Label="Delta" Required="@true">
            <AntDesign.InputNumber @bind-Value="@context.Delta" />
        </FormItem>
        <FormItem Label="Comment" Required="@true">
            <Input @bind-Value="@context.Comment" />
        </FormItem>
        <FormItem Label="Operation Type" Required="@true">
             <Select Mode="default"
                    @bind-Value="@context.OperationType"    
                    TItemValue="BalanceUpdateOperationType"
                    TItem="BalanceUpdateOperationType">
                <SelectOptions>
                    @foreach (var item in Enum.GetValues<BalanceUpdateOperationType>())
                    {
                        <SelectOption
                            TItemValue="BalanceUpdateOperationType"
                            TItem="BalanceUpdateOperationType"
                            Value=@item
                            Label="@item.ToString()"/>
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="API Key" Required>
            <InputPassword @bind-Value="@context.ChangeBalanceApiKey" />
        </FormItem>
    </Form>
</Modal>


<style>
.ant-table td {
    padding: 5px 10px !important
}
</style>

@code
{
    [Parameter]
    public string TraderId { get; set; }

    List<TradingAccountModel> GridData = new List<TradingAccountModel>();

    List<TradingGroupModel> tradingGroups = new List<TradingGroupModel>();

    int _pageSize = 999;

    private bool isLoading = false;
    private bool stopPriceRefresh = false;
    private bool isUpdateBalanceDialogVisible = false;
    private bool isUpdateTradingGroupDialogVisible = false;

    UpdateBalanceModel formUpdateBalance = new UpdateBalanceModel();

    protected override async Task OnInitializedAsync()
    {
        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() => RefreshData());
        await RefreshData();
    }

    private async Task RefreshData()
    {
        isLoading = true;

        try
        {
            tradingGroups = (await LiveDemoServices.GetContext(AppState.IsLive)
                .TradingGroupsRepository.GetAllAsync()).Select(TradingGroupModel.Create).ToList();

            Console.WriteLine($"Acc Tab -> RefreshData ->  GRPC call"); /// REMOVE AFTER TEST!!!!

            var grpcAccounts = await LiveDemoServices.GetContext(AppState.IsLive).EngineApi.GetAccountsAsync(
                new GetAccountsGrpcRequestContract
                    {
                        TraderId = this.TraderId
                    });

            Console.WriteLine($"Acc Tab -> RefreshData ->  grpcAccounts.Count = {grpcAccounts.Count()}"); /// REMOVE AFTER TEST!!!!
            GridData = grpcAccounts.Select(TradingAccountModel.Create).ToList();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }        

        Console.WriteLine($"Acc Tab -> RefreshData -> StateHasChanged"); /// REMOVE AFTER TEST!!!!

        this.StateHasChanged();
    }

    void ShowUpdateBalanceDialog(string accountId)
    {
        formUpdateBalance = new UpdateBalanceModel
            {
                TraderId = TraderId,
                AccountId = accountId,
                OperationType = BalanceUpdateOperationType.BalanceCorrection,
            };

        this.isUpdateBalanceDialogVisible = true;

        // this.StateHasChanged();
    }

    void ShowUpdateTradingGroupDialog(string accountId)
    {
        
    }

    void CloseUpdateBalanceDialog()
    {
        this.isUpdateBalanceDialogVisible = false;
        // this.StateHasChanged();
    }

    private async Task UpdateBalance()
    {
        Console.WriteLine($"UpdateBalance"); /// REMOVE AFTER TEST!!!!

        if (formUpdateBalance.ChangeBalanceApiKey != appSettings.ChangeBalanceApiKey)
        {
            await MessageService.ErrorAsync("API Key is not valid");
            return;
        }

        if (Math.Abs(formUpdateBalance.Delta) < 0.001)
        {
            await MessageService.ErrorAsync("Delta can't be zero");
            return;
        }

        var contract = new ChangeBalanceGrpcRequest
            {
                TraderId = formUpdateBalance.TraderId,
                AccountId = formUpdateBalance.AccountId,
                Delta = formUpdateBalance.Delta,
                Comment = formUpdateBalance.Comment,
                OperationType = formUpdateBalance.OperationType,
                ProcessId = $"Dealing-Admin-{FormatUtils.DateTimeNamedWithMsFormat(DateTime.UtcNow)}"
            };

        var grpcResponse = await LiveDemoServices.GetContext(AppState.IsLive).EngineApi.ChangeBalanceAsync(contract);

        if (grpcResponse.Result != TradingOperationResult.Ok)
        {
            await MessageService.ErrorAsync($"Result: {grpcResponse.Result.ToString()}");
            return;
        }

        await MessageService.SuccessAsync($"Result: OK. Account updated balance: ${grpcResponse.Account.Balance}");
        CloseUpdateBalanceDialog();

        Console.WriteLine($"UpdateBalance Result: ${grpcResponse.Account.Balance}"); /// REMOVE AFTER TEST!!!!

        await RefreshData();
    }
}