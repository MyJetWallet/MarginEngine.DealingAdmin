@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Microsoft.AspNetCore.Components
@using Serilog.Core
@using SimpleTrading.Abstraction.Markups
@using SimpleTrading.Abstraction.Trading.Profiles
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Abstraction.Trading.Swaps
@using SimpleTrading.Abstractions.Common.InstrumentsAvatar
@using SimpleTrading.Common.MyNoSql.InstrumentsAvatar
@using System.ComponentModel.DataAnnotations

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;
@inject ISwapProfileWriter swapProfileWriter;
@inject IMarkupProfilesRepository markupProfilesRepository
@inject ISnackbar snackbar
@inject AdminAppSettings appSettings
@inject Logger logger

<Form @ref="editForm"
      Model="TradingGroup"
      ValidateOnChange="@true"
      ValidateMode="@FormValidateMode.Rules"
      LabelColSpan="6"
      WrapperColSpan="12">
    <Validator>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </Validator>
    <ChildContent>
        <FormItem Label="Id" Required Rules=@RequiredRule>
            <Input @bind-Value="@context.Id" Placeholder="Group Id" Disabled="@(!String.IsNullOrEmpty(context.Id))"/>
        </FormItem>            
        <FormItem Label="Name" Required Rules=@RequiredRule>
            <Input @bind-Value="@context.Name" Placeholder="Name" />
        </FormItem>
        <FormItem Label="Markup Profile Id" Required Rules=@RequiredRule>
             <Select @bind-Value="@context.MarkupProfileId"
                    TItemValue="string"
                    TItem="string">
                <SelectOptions>
                    @foreach (var profile in markupProfiles)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@profile.ProfileId Label=@profile.ProfileId/>
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Trading Profile Id" Required Rules=@RequiredRule>
            <Select @bind-Value="@context.TradingProfileId"
                    TItemValue="string"
                    TItem="string">
                <SelectOptions>
                    @foreach (var profile in tradingProfiles)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@profile.Id Label=@profile.Id/>
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Swap Profile Id" Required Rules=@RequiredRule>
             <Select @bind-Value="@context.SwapProfileId"
                    TItemValue="string"
                    TItem="string">
                <SelectOptions>
                    @foreach (var item in swapProfiles)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@item.Id Label=@item.Id/>
                    }
                </SelectOptions>
            </Select>
        </FormItem> 
        <FormItem Label="API Key" Required Rules=@CrudApiKeyRule>
            <InputPassword @bind-Value="@context.TokenKey" />
        </FormItem>
        <FormItem>
            <AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="SaveGroup">
                Save
            </AntDesign.Button>
            <AntDesign.Button OnClick="CloseDialog">
                Cancel
            </AntDesign.Button>
        </FormItem>
    </ChildContent>
</Form>
 
@code {
    [Parameter]
    public TradingGroupModel TradingGroup { get; set; } = new();

    [Parameter]
    public EventCallback OnFinish { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private IEnumerable<ITradingProfile> tradingProfiles { get; set; } = new List<ITradingProfile>();
    private IEnumerable<IMarkupProfile> markupProfiles { get; set; } = new List<IMarkupProfile>();
    private IEnumerable<ISwapProfile> swapProfiles { get; set; } = new List<ISwapProfile>();

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };
    private FormValidationRule[] CrudApiKeyRule;

    AntDesign.Form<TradingGroupModel> editForm;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("TradingGroupEditForm  >> OnInitializedAsync >> START"); /// REMOVE AFTER TEST!!!
        tradingProfiles = await liveDemoServices.GetContext(AppState.IsLive)
            .TradingProfileRepository.GetAllAsync();
        swapProfiles = await swapProfileWriter.GetAllAsync();
        markupProfiles = await markupProfilesRepository.GetAllAsync();

        Console.WriteLine("TradingGroupEditForm  >> OnInitializedAsync >> CrudApiKeyRule "); /// REMOVE AFTER TEST!!!

        CrudApiKeyRule = new FormValidationRule[]
        {
            new FormValidationRule
                {
                    Required = true,
                    Type = FormFieldType.String,
                    OneOf = new string[] { appSettings.AdminCrudApiKey },
                    Message = "API Key is not valid"
                }
        };

        Console.WriteLine("TradingGroupEditForm  >> OnInitializedAsync >> END"); /// REMOVE AFTER TEST!!!
    }

    private async void CloseDialog()
    {
        await OnCancel.InvokeAsync();
    }

    private async void SaveGroup()
    {
        Console.WriteLine(">> SaveGroup >> START"); /// REMOVE AFTER TEST!!!
        try
        {
            if (!editForm.Validate())
            {
                return;
            }

            if (TradingGroup.TokenKey != appSettings.AdminCrudApiKey)
            {
                snackbar.Add("API key is not valid", MudBlazor.Severity.Error);
                return;
            }

            await liveDemoServices.GetContext(AppState.IsLive)
                .TradingGroupsRepository.UpdateAsync(TradingGroup);

            Console.WriteLine($"Trading Group {TradingGroup.Id} saved");
            await OnFinish.InvokeAsync();
            Console.WriteLine(">> SaveGroup >> Message"); /// REMOVE AFTER TEST!!!
            snackbar.Add($"Trading Group {TradingGroup.Id} saved", Severity.Success);
            Console.WriteLine(">> SaveGroup >> END"); /// REMOVE AFTER TEST!!!
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
        Console.WriteLine("TradingGroups >> SaveGroup >> END"); /// REMOVE AFTER TEST!!!
    }
}
