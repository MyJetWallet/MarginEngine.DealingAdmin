@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Instruments
@using Microsoft.AspNetCore.Components

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices
@inject ITradingInstrumentsRepository instrumentsRepository
@inject ITradingProfileNewInstrumentsValidator profileNewInstrumentsValidator
@inject ISnackbar snackbar
@inject Logger logger
@inject NavigationManager navManager

<PageHeader Class="m-0 p-0" Title="@pageTitle"/>
<AntDesign.Row>
    <Col Flex=@("360px") Class="px-2">
        Profile Id:
        <Input @bind-Value="@TradingProfile.Id"
                Placeholder="Profile Id"
                Style="width:220px"
                Disabled="@(!isNewProfile)"/>
    </Col>
    <Col Flex=@("220px") Class="px-2">
        Margin Call %
        <Input @bind-Value="@TradingProfile.MarginCallPercent"
                Style="width:80px"
                Placeholder="Margin Call %"/>
    </Col>
    <Col Flex=@("220px") Class="px-2">
        Stop Out %
        <Input @bind-Value="@TradingProfile.StopOutPercent"
                Style="width:80px"
                Placeholder="Stop Out %"/>
    </Col>
    <Col Flex=@("220px") Class="px-2">
        Stop Out %
        <Input @bind-Value="@TradingProfile.StopOutPercent"
                Style="width:80px"
                Placeholder="Stop Out %"/>
    </Col>
    <Col Flex=@("220px") Class="px-2">
        Topping Up %
        <Input @bind-Value="@TradingProfile.PositionToppingUpPercent"
                Style="width:80px"
                Placeholder="Topping Up %"/>
    </Col>
    <Col Flex=@("auto")>
    </Col>
    <Col Flex=@("160px")>
        <AntDesign.Button Icon="check"
            Class="btn-text bg-color-aquamarine"
            OnClick="SaveTradingProfile"
            Disabled="@(String.IsNullOrEmpty(TradingProfile.Id))">Save</AntDesign.Button>
    </Col>
    <Col Flex=@("160px")>
        <AntDesign.Button Icon="arrow-left"
            Class="btn-text bg-color-yellow"
            OnClick="GoBack">Back</AntDesign.Button>
    </Col>
</AntDesign.Row>

<Table DataSource="@TradingProfile.Instruments"
       TItem="TradingProfileInstrumentModel"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 200px)"
       PageSize="999">
    <TitleTemplate>
        <PageHeader Title="Profile Instruments" Class="m-0 p-0">
            <PageHeaderExtra>
                 <AntDesign.Button 
                    OnClick="ShowNewInstrumentDialog" 
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text">Add Instrument</AntDesign.Button>
            </PageHeaderExtra>
        </PageHeader>
    </TitleTemplate>
    <RowTemplate>           
        <AntDesign.Column Title="Instrument Id"
                TData="string"
                DataIndex="Id"
                Sortable/>
        <AntDesign.Column Title="Operation Volume" TData="string">
            <div>Max: @context.MaxOperationVolume</div>
            <div>Min: @context.MinOperationVolume</div>
        </AntDesign.Column>
        <AntDesign.Column Title="Max Position Volume"
                TData="double"
                DataIndex="MaxPositionVolume"
                Sortable/>
        <AntDesign.Column Title="Open Position Delay" TData="string">
            <div>Max: @context.OpenPositionMaxDelayMs ms</div>
            <div>Min: @context.OpenPositionMinDelayMs ms</div>
        </AntDesign.Column>
        <AntDesign.Column Title="Slippage" TData="string">
            <div class="no-click"><Checkbox Checked="@context.TpSlippage">Take Profit</Checkbox></div>
            <div class="no-click"><Checkbox Checked="@context.SlSlippage">Stop Loss</Checkbox></div>
            <div class="no-click"><Checkbox Checked="@context.OpenPositionSlippage">Open Position</Checkbox></div>
        </AntDesign.Column>
        <AntDesign.Column Title="Leverages" TData="string">
            <span>@(String.Join(" ", context.Leverages))</span>
        </AntDesign.Column>
        <AntDesign.Column Title="Stop Out %"
                TData="double?"
                DataIndex="StopOutPercent"
                Sortable/>
        <ActionColumn Title="Actions">
            <Tooltip Title="@("Edit")">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
            </Tooltip>
            <Tooltip Title="@("Clone")">
                <a><i @onclick="()=>CloneInstrument(context)"
                    class="material-icons color-green">content_copy</i></a>
            </Tooltip>
            <Tooltip Title="@("Delete")">
                <Popconfirm Title="Are you sure?" OkText="Confirm" CancelText="Cancel">
                    <a><i @onclick="()=>DeleteInstrument(context)"
                        class="material-icons color-crimson">delete_outline</i></a>
                </Popconfirm>
            </Tooltip>
        </ActionColumn>
    </RowTemplate>
</Table>

<Modal Title="@instrumentEditFormTitle"
       Visible="@isEditInstrumentDialogVisible"
       Closable="@false"
       Footer=null
       Width="720">
    <Form @ref="editForm" 
          Model="editedInstrument"        
          LabelColSpan="10"
          WrapperColSpan="14"
          ValidateOnChange="@true"
          ValidateMode="@FormValidateMode.Rules">
        <Validator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </Validator>
        <ChildContent>
            <FormItem Label="Instrument Id" Rules=@RequiredRule>
                <Select DataSource="@availableInstruments"
                    @bind-Value="@context.Id"
	                TItemValue="string"
	                TItem="string"
                    Disabled="@(!isNewInstrument)"
                    EnableSearch>
                </Select>
            </FormItem>
            <FormItem Label="Max Position Volume" Required Rules=@RequiredNumberRule>
                <Input @bind-Value="context.MaxPositionVolume" Placeholder="Max Position Volume" TValue="double"/>
            </FormItem>
            <FormItem Label="Min Operation Volume" Required Rules=@RequiredNumberRule>
                <Input @bind-Value="context.MinOperationVolume" Placeholder="Min Operation Volume" TValue="double"/>
            </FormItem>
            <FormItem Label="Max Operation Volume" Required Rules=@RequiredNumberRule>
                <Input @bind-Value="context.MaxOperationVolume" Placeholder="Max Operation Volume" TValue="double"/>
            </FormItem>
            <FormItem Label="Open Position Max Delay" Required Rules=@RequiredIntRule>             
                <Input @bind-Value="context.OpenPositionMaxDelayMs" Placeholder="Open Position Max Delay (ms)" TValue="int"/>
            </FormItem>
            <FormItem Label="Stop out %" Required>
                <Input @bind-Value="context.StopOutPercent" Placeholder="Stop out %" TValue="double?"/>
            </FormItem>
            <FormItem Label="Leverages">
                <LeveragesEditor @bind-Instrument="@context"/>
            </FormItem>        
            <FormItem Label="Take Profit Slippage" Required>
                <Checkbox Checked="@context.TpSlippage" @bind-Value="context.TpSlippage"/>
            </FormItem>       
            <FormItem Label="Stop Loss Slippage" Required>
                <Checkbox Checked="@context.SlSlippage" @bind-Value="context.SlSlippage"/>
            </FormItem>       
            <FormItem Label="Slippage on Open Positions" Required>
                <Checkbox Checked="@context.OpenPositionSlippage" @bind-Value="context.OpenPositionSlippage"/>
            </FormItem>
            <AntDesign.Row Class="center-middle p-3">
                <Col Span="12">
                </Col>    
                <Col Span="6">
                    <AntDesign.Button OnClick="SaveInstrument"
                        Type="@AntDesign.ButtonType.Primary"
                        Class="btn-text">Save</AntDesign.Button>
                </Col>    
                <Col Span="6">
                    <AntDesign.Button OnClick="CancelEditInstrumentDialog"
                        Class="btn-text">Cancel</AntDesign.Button>
                </Col>
            </AntDesign.Row>
        </ChildContent>
    </Form>
</Modal>

@code {
    [Parameter]
    public TradingProfileModel TradingProfile { get; set; }

    [Parameter]
    public EventCallback OnGoBack { get; set; }

    TradingProfileInstrumentModel selectedInstrument;
    TradingProfileInstrumentModel editedInstrument;
    List<string> instrumentIds;
    List<string> availableInstruments;

    AntDesign.Form<TradingProfileInstrumentModel> editForm;

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };
    private FormValidationRule[] RequiredIntRule = { new FormValidationRule { Required = true, Type = FormFieldType.Integer } };
    private FormValidationRule[] RequiredNumberRule = { new FormValidationRule { Required = true, Type = FormFieldType.Number } };

    private string profileId { get; set; }

    private bool isNewProfile = true;

    private string pageTitle = "Add New Trading Profile";
    private string instrumentEditFormTitle = "";
    private bool isEditInstrumentDialogVisible;
    private bool isNewInstrument = true;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(TradingProfile.Id))
        {
            profileId = TradingProfile.Id;
            pageTitle = $"Edit '{profileId}' Trading Profile";
            isNewProfile = false;
        }

        instrumentIds = (await instrumentsRepository.GetAllAsync()).Select(x => x.Id).ToList();
        availableInstruments = GetAvailableInstrumentsList();

        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() => GoBack());
    }

    private List<string> GetAvailableInstrumentsList()
    {
        var resultSet = new List<string>();

        if (selectedInstrument != null)
        {
            resultSet.Add(selectedInstrument.Id);
        }
        else if (TradingProfile.Instruments.Any()) 
        {
            foreach(var instId in instrumentIds)
            {
                if (!TradingProfile.Instruments.Where(x => x.Id == instId).Any())
                {
                    resultSet.Add(instId);
                }
            }
        }
        else
        {
            resultSet.AddRange(instrumentIds);
        }

        return resultSet;
    }

    private void ShowNewInstrumentDialog()
    {
        selectedInstrument = null;
        isNewInstrument = true;
        availableInstruments = GetAvailableInstrumentsList();

        editedInstrument = new TradingProfileInstrumentModel 
        {
            Id = availableInstruments.FirstOrDefault(),
            Leverages = new int[] { }
        };

        instrumentEditFormTitle = $"Add New Instrument for Trading Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void CancelEditInstrumentDialog()
    {
        isEditInstrumentDialogVisible = false;
    }

    private void ShowEditInstrumentDialog(TradingProfileInstrumentModel profileItem)
    {
        selectedInstrument = profileItem;
        isNewInstrument = false;
        editedInstrument = TradingProfileInstrumentModel.Create(profileItem);
        availableInstruments = GetAvailableInstrumentsList();
        instrumentEditFormTitle = $"Edit '{profileItem.Id}' Instrument for Trading Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void CloneInstrument(TradingProfileInstrumentModel profileItem)
    {
        selectedInstrument = null;
        editedInstrument = TradingProfileInstrumentModel.Create(profileItem);
        availableInstruments = GetAvailableInstrumentsList();
        instrumentEditFormTitle = $"Add New Instrument for Trading Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void DeleteInstrument(TradingProfileInstrumentModel profileItem)
    {
        TradingProfile.Instruments.Remove(profileItem);
    }

    private void SaveInstrument()
    {
        if (!editForm.Validate())
        {
            return;
        }

        if (selectedInstrument != null)
        {
            snackbar.Add($"SaveInstrument >> selected '{selectedInstrument.Id}' Leverages BEFORE: {selectedInstrument.Leverages.Count()}");
            snackbar.Add($"SaveInstrument >> Original Leverages BEFORE: {TradingProfile.Instruments.First(x => x.Id == selectedInstrument.Id).Leverages.Count()}", Severity.Info);
            selectedInstrument = TradingProfileInstrumentModel.Create(editedInstrument);
            snackbar.Add($"SaveInstrument >> selected '{selectedInstrument.Id}' Leverages AFTER: {selectedInstrument.Leverages.Count()}");
            snackbar.Add($"SaveInstrument >> Original Leverages AFTER: {TradingProfile.Instruments.First(x => x.Id == selectedInstrument.Id).Leverages.Count()}", Severity.Info);

            snackbar.Add($"Trading Profile '{TradingProfile.Id}' saved", Severity.Success);
        }
        else
        {
            TradingProfile.Instruments.Add(editedInstrument);
        }

        isEditInstrumentDialogVisible = false;
    }

    protected async Task SaveTradingProfile()
    {
        var profileNewInstrumentsValidatorErrorMessage =
            await profileNewInstrumentsValidator.ValidateTradingProfileNewInstruments(TradingProfile, AppState.IsLive);

        if (!String.IsNullOrEmpty(profileNewInstrumentsValidatorErrorMessage))
        {
            snackbar.Add(profileNewInstrumentsValidatorErrorMessage, Severity.Error);
        }

        await liveDemoServices.GetContext(AppState.IsLive).TradingProfileRepository.UpdateAsync(TradingProfile);
        snackbar.Add($"Trading Profile '{TradingProfile.Id}' saved", Severity.Success);
    }

    private async void GoBack()
    {
        await OnGoBack.InvokeAsync();
    }
}
