@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using Microsoft.AspNetCore.Components
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Abstractions.Common.InstrumentsAvatar
@using SimpleTrading.Common.MyNoSql.InstrumentsAvatar

@inject TradingInstrumentMyNoSqlRepository instrumentAvatarRepository

<Form Model="Instrument"
        Layout="@(FormLayout.Inline)">
    <FormItem>
        <ChildContent>
            <FormItem Label="Id" LabelColSpan="4" WrapperColSpan="8" Required>
                <Input @bind-Value="@context.Id" Placeholder="Instrument Id" Disabled="@(!String.IsNullOrEmpty(context.Id))"/>
            </FormItem>            
            <FormItem Label="Weight" LabelColSpan="4" WrapperColSpan="8" Required>
                <Input @bind-Value="@context.Weight" TValue="int?" Placeholder="Weight" />
            </FormItem>
        </ChildContent>
    </FormItem>
    <FormItem Label="Name" LabelColSpan="4" Required>
        <Input @bind-Value="@context.Name" Placeholder="Name" />
    </FormItem>
    <FormItem>
        <ChildContent>
            <FormItem Label="Base" LabelColSpan="4" WrapperColSpan="8" Required>
                <Input @bind-Value="@context.Base" Placeholder="Base" />
            </FormItem>
            <FormItem Label="Quote" LabelColSpan="4" WrapperColSpan="8" Required>
                <Input @bind-Value="@context.Quote" Placeholder="Quote" />
            </FormItem>
        </ChildContent>
    </FormItem>
    <FormItem Label="Digits" Required>
        <Input @bind-Value="@context.Digits" TValue="int" Placeholder="Digits" />
    </FormItem>
    <FormItem Label="TickSize" Required>
        <Input @bind-Value="@context.TickSize" TValue="double" Placeholder="Tick Size" />
    </FormItem>
    <FormItem Label="Swap Schedule" Required>
        <Select @bind-Value="@Instrument.SwapScheduleId"
                TItemValue="string"
                TItem="string">
            <SelectOptions>
                @foreach (var item in SwapProfiles)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@item.Id Label=@item.Id/>
                }
            </SelectOptions>
        </Select>
    </FormItem>
    <FormItem Label="Trading Group">
         <Select @bind-Value="@Instrument.GroupId"
                TItemValue="string"
                TItem="string">
            <SelectOptions>
                @foreach (var item in InstrumentGroups)
                {
                    <SelectOption TItemValue="string" TItem="string" Value=@item.Id Label=@item.Name/>
                }
            </SelectOptions>
        </Select>
    </FormItem>
    <FormItem Label="Days Off">
        <DaysOffEditor @bind-Instrument="@context"/>
    </FormItem>  
    <FormItem Label="Day Timeout" Required>
        <Input @bind-Value="@context.DayTimeout" TValue="int?" Placeholder="Day Timeout" />
    </FormItem>    
    <FormItem Label="Night Timeout" Required>
        <Input @bind-Value="@context.NightTimeout" TValue="int?" Placeholder="Night Timeout" />
    </FormItem>
    <FormItem Label="API Key" Required>
        <InputPassword @bind-Value="@context.TokenKey" />
    </FormItem>
</Form>
 
@code {
    [Parameter]
    public TradingInstrumentModel Instrument { get; set; } = new();

    [Parameter]
    public EventCallback<TradingInstrumentModel> InstrumentChanged { get; set; }

    [Parameter]
    public IEnumerable<ISwapProfile> SwapProfiles { get; set; } = new List<ISwapProfile>();

    [Parameter]
    public IEnumerable<IInstrumentGroup> InstrumentGroups { get; set; }

    [Parameter]
    public IEnumerable<IInstrumentSubGroup> SubGroups { get; set; }

    public async Task UpdateEditedInstrument()
    {
        Console.WriteLine("UpdateEditedInstrument call");
        await InstrumentChanged.InvokeAsync(Instrument);
    }
}