@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.BidAsk

@inject IPriceRetriever priceRetriever

<div class="grid-container-price-profit">
    <div>
        @if(Order.OpenOrderType > 0)
        {
            <div><span class="badge-orange">@desiredPrice</span></div>
        }
        <div style="@($"font-weight: {(openPriceBoldFont ? "bold": "normal")}")">Open: @openPrice</div>
        <div style="@($"font-weight: {(openPriceBoldFont ?  "normal": "bold")}")">Now: @nowPrice.ToString($"F{Digits}")</div>
        <div>Ticks: <span style="@($"font-weight: bold; color: {(@positionTicks > 0 ? "SeaGreen" : "DarkRed")}")">@positionTicks</span></div>
    </div>
    <div>
        <span class="@($"simple-badge {(profitLoss > 0 ? "badge-green" : "badge-red")}")">@profitLoss.ToString($"F2")</span>
    </div>
</div>

@code {
    [Parameter]
    public ActivePositionViewModel Order { get; set; }

    [Parameter]
    public int Digits { get; set; }

    private bool openPriceBoldFont;
    private string openPrice;
    private string desiredPrice = "";
    private double nowPrice;
    private int positionTicks;
    private double profitLoss;

    private bool isUpdating = false;

    protected override async Task OnInitializedAsync()
    {
        openPrice = Order.OpenPrice.ToString($"F{Digits}");
        desiredPrice = Order.DesiredPrice.ToString($"F{Digits}");
        profitLoss = Order.Profit;
        positionTicks = FxUtils.CalcTicks(Order.OpenPrice, nowPrice, Digits);

        RefreshData();

        AppJobService.PriceUpdateEvent += async () => await InvokeAsync(() => RefreshData());
    }

    private void RefreshData()
    {
        if (isUpdating)
        {
            return;
        }

        isUpdating = true;

        var currentBidAsk = priceRetriever.GetBidAsk(Order.Instrument);

        if (currentBidAsk != null)
        {
            SetData(currentBidAsk);
        }

        isUpdating = false;      
    }

    public void SetData(BidAskModel bidAsk)
    {
        nowPrice = FxUtils.GetOrderPrice(Order.Operation, bidAsk);
        positionTicks = FxUtils.CalcTicks(Order.OpenPrice, nowPrice, Digits);
        openPriceBoldFont = nowPrice <= Order.OpenPrice;
        profitLoss = FxUtils.CalcProfitLossByPrice(Order, nowPrice);
        this.StateHasChanged();
    }
}
