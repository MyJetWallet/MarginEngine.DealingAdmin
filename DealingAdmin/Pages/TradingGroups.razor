@page "/TradingGroups"

@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.TradingGroups
@using DealingAdmin.Shared.Services
@using Serilog.Core

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;
@inject IUserMessageService messageService
@inject AdminAppSettings appSettings
@inject Logger logger

<PageHeader Class="m-0 p-0" Title="Trading Groups">
    <PageHeaderExtra>
        <Button OnClick="ShowNewGroupDialog" Type="@ButtonType.Primary">New Group</Button>
    </PageHeaderExtra>
</PageHeader>

<Table DataSource="@tradingGroups"
       TItem="TradingGroupModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 120px)"
       PageSize="999">
    <RowTemplate>           
        <Column Title="Id"
                DataIndex="Id"
                TData="string"
                Sortable/>
        <Column Title="Name"
                DataIndex="Name"
                TData="string"
                Sortable/>
        <Column Title="Trading Profile Id" 
                DataIndex="TradingProfileId" 
                TData="string"
                Sortable/>
        <Column Title="Markup Profile Id"
                DataIndex="MarkupProfileId" 
                TData="string"
                Sortable/>
        <Column Title="Swap Profile Id"
                DataIndex="SwapProfileId"
                TData="string"/>
        <ActionColumn Title="Edit" Width="60">
                <a><i @onclick="()=>ShowEditGroupDialog(context)"
                    class="material-icons color-primary">edit</i></a>
        </ActionColumn>
    </RowTemplate>
</Table>

if (@isEditGroupDialogVisible)
{
    <TradingGroupEditFormDialog
        Title=@groupEditFormTitle
        TradingGroup=@editedGroup
        OnCloseDialog=@CloseEditGroupDialog />   
}

@code {
    private List<TradingGroupModel> tradingGroups;

    int _pageSize = 999;

    private bool isLoading = false;
    private bool isUpdateGroupDialogVisible = false;

    private TradingGroupModel editedGroup = new TradingGroupModel();
    private string groupEditFormTitle = "";
    private bool isEditGroupDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        tradingGroups = (await liveDemoServices.GetContext(AppState.IsLive)
           .TradingGroupsRepository.GetAllAsync()).Select(TradingGroupModel.Create).ToList();

        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() => RefreshData());
    }

    private async Task RefreshData()
    {
        isLoading = true;

        tradingGroups = (await liveDemoServices.GetContext(AppState.IsLive)
           .TradingGroupsRepository.GetAllAsync()).Select(TradingGroupModel.Create).ToList();

        isLoading = false;
        this.StateHasChanged();
    }

    private void ShowNewGroupDialog()
    {
        groupEditFormTitle = "Add New Group";
        editedGroup = new TradingGroupModel();
        isEditGroupDialogVisible = true;
    }

    private void ShowEditGroupDialog(TradingGroupModel Group)
    {
        Console.WriteLine("TradingGroups  >> ShowEditGroupDialog >> START"); /// REMOVE AFTER TEST!!!
        groupEditFormTitle = $"Edit '{Group.Id}' Group";
        editedGroup = Group;
        isEditGroupDialogVisible = true;
        Console.WriteLine("TradingGroups  >> ShowEditGroupDialog >> END"); /// REMOVE AFTER TEST!!!
        this.StateHasChanged();
    }

    private void CloseEditGroupDialog()
    {
        isEditGroupDialogVisible = false;
        editedGroup = new TradingGroupModel();
    }
}