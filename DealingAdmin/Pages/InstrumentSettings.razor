@page "/InstrumentSettings"

@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.InstrumentSettings
@using DealingAdmin.Components.InstrumentSettings.Dialogs
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup

@inject IInstrumentSubGroupsRepository _subGroupsRepository;
@inject IInstrumentGroupsRepository _groupsRepository;
@inject ITradingInstrumentsRepository _instrumentsRepository;

<Tabs DefaultActiveKey="1" Size="@TabSize.Large" Style="margin-bottom: 32px">
    <TabPane Tab="INSTRUMENTS">
        <InstrumentsTab/>
	</TabPane>
    <TabPane Tab="INSTRUMENTS GROUPS" Key="InstrumentGroups">
        <PageHeader Class="site-page-header" Title="Instruments groups">
            <PageHeaderExtra>
                <Button OnClick="@(() => isActiveAddGroupForm = true)" Type="@ButtonType.Primary">Add group</Button>
            </PageHeaderExtra>
        </PageHeader>
        <Table DataSource="instrumentGroups" TItem="InstrumentGroupModel">
            <Column Title="Weight" DataIndex="Weight" TData="int"/>
            <Column Title="Id" DataIndex="Id" TData="string"/>
            <Column Title="Name" DataIndex="Name" TData="string"/>
        </Table>
    </TabPane>
    <TabPane Tab="INSTRUMENTS SUBGROUPS" Key="InstrumentSubGroups">
        <PageHeader Class="site-page-header" Title="Instruments sub groups">
            <PageHeaderExtra>
                <Button OnClick="@(() => isActiveAddSubGroupForm = true)" Type="@ButtonType.Primary">Add sub group</Button>
            </PageHeaderExtra>
        </PageHeader>
        <Table DataSource="instrumentSubGroups" TItem="InstrumentSubGroupModel">
            <Column Title="Weight" DataIndex="Weight" TData="int"/>
            <Column Title="Id" DataIndex="Id" TData="string"/>
            <Column Title="Name" DataIndex="Name" TData="string"/>
            <Column Title="Group" DataIndex="GroupId" TData="string"/>
        </Table>
    </TabPane>
</Tabs>

@if (isActiveAddGroupForm)
{
    <TradingInstrumentGroupCrudForm OnSubmit="HandleAddGroup" OnClose="HandleClose"/>
}

@if (isActiveAddSubGroupForm)
{
    <TradingInstrumentSubGroupCrudForm Groups="instrumentGroups" OnSubmit="HandleAddSubGroup" OnClose="HandleClose"/>
}

@code {
    private IEnumerable<TradingInstrumentModel> tradingInstruments;
    private IEnumerable<InstrumentGroupModel> instrumentGroups;
    private IEnumerable<InstrumentSubGroupModel> instrumentSubGroups;

    private bool isActiveAddInstrumentForm;
    private bool isActiveAddGroupForm;
    private bool isActiveAddSubGroupForm;

    protected override async Task OnInitializedAsync()
    {
        instrumentSubGroups = (await _subGroupsRepository.GetAllAsync()).Select(InstrumentSubGroupModel.Create);
        instrumentGroups = (await _groupsRepository.GetAllAsync()).Select(InstrumentGroupModel.Create);
        tradingInstruments = (await _instrumentsRepository.GetAllAsync()).Select(TradingInstrumentModel.Create);

        await base.OnInitializedAsync();
    }

    private async void HandleAddSubGroup(IInstrumentSubGroup group)
    {
        await _subGroupsRepository.UpdateAsync(group);
        instrumentSubGroups = (await _subGroupsRepository.GetAllAsync()).Select(InstrumentSubGroupModel.Create);
        isActiveAddSubGroupForm = false;
        StateHasChanged();
    }

    private async void HandleAddGroup(IInstrumentGroup group)
    {
        await _groupsRepository.UpdateAsync(group);
        instrumentGroups = (await _groupsRepository.GetAllAsync()).Select(InstrumentGroupModel.Create);
        isActiveAddGroupForm = false;
        StateHasChanged();
    }

    private void HandleClose()
    {
        isActiveAddGroupForm = false;
        isActiveAddSubGroupForm = false;
        StateHasChanged();
    }


}