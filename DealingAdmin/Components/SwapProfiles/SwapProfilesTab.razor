@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.Trading.Swaps

@inject ISwapProfileWriter SwapProfileWriter
@inject NavigationManager NavManager

@if (!editFormSwitch)
{
    <PageHeader Class="m-0 p-0" Title="Swap Profiles">
        <PageHeaderExtra>
            <AntDesign.Button OnClick="ShowNewProfile" Type="@AntDesign.ButtonType.Primary">New Profile</AntDesign.Button>
        </PageHeaderExtra>
    </PageHeader>

    <Table DataSource="@swapGroupProfiles"
           TItem="SwapGroupProfile"
           Bordered="@true"
           Total="0"
           HidePagination="@true"
           ScrollY="calc(100vh - 120px)"
           PageSize="999">
        <RowTemplate>           
            <AntDesign.Column Title="Profile Id"
                DataIndex="ProfileId"
                TData="string"
                Sortable
                Width="200"/>
            <AntDesign.Column Title="Instruments"
                TData="string">
                @foreach (var instrument in context.Instruments)
                {
                    <Tag PresetColor="PresetColor.Purple">@instrument.Id</Tag>
                }
            </AntDesign.Column>    
            <ActionColumn Title="Edit" Width="60">
                <a><i @onclick="()=>ShowEditProfile(context)"
                    class="material-icons color-primary">edit</i></a>
            </ActionColumn>
        </RowTemplate>
    </Table>
}
else
{
    <EditSwapProfile ProfileGroup="editedProfile" OnGoBack="CloseEditProfile"/>
}

@code {
    private List<SwapGroupProfile> swapGroupProfiles = new List<SwapGroupProfile>();

    int _pageSize = 999;
    
    private SwapGroupProfile editedProfile;
    private string profileEditFormTitle;
    private bool editFormSwitch = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var swapProfiles = (await SwapProfileWriter.GetAllAsync()).Select(SwapProfileModel.Create);
        var profilesGroupDictionary = new Dictionary<string, List<SwapProfileModel>>();

        foreach(var item in swapProfiles)
        {
            if (!profilesGroupDictionary.ContainsKey(item.Id))
            {
                profilesGroupDictionary.Add(item.Id, new List<SwapProfileModel>());
            }

            Console.WriteLine($"Swap Profiles Init >> profilesGroupDictionary item: {item.InstrumentId}"); // !!! REMOVE AFTER TEST
            profilesGroupDictionary[item.Id].Add(item);
        }

        foreach(var group in profilesGroupDictionary)
        {
            swapGroupProfiles.Add(new SwapGroupProfile
                {
                    ProfileId = group.Key,
                    Instruments = group.Value
                });

            Console.WriteLine($">>> swapGroupProfile [{group.Key}] ({String.Join("|", group.Value.Select(x => x.InstrumentId))})"); // !!! REMOVE AFTER TEST
        }

        editedProfile = new SwapGroupProfile
            {
                ProfileId = "",
                Instruments = new List<SwapProfileModel>()
            };
    }

    private void ShowNewProfile()
    {
        profileEditFormTitle = "Add New Profile";
        editedProfile = new SwapGroupProfile
            {
                ProfileId = "",
                Instruments = new List<SwapProfileModel>()
            };
        editFormSwitch = true;
    }

    private void ShowEditProfile(SwapGroupProfile groupProfile)
    {
        profileEditFormTitle = $"Edit '{groupProfile.ProfileId}' Profile";
        editedProfile = groupProfile;
        editFormSwitch = true;
    }

    private async void CloseEditProfile()
    {
        editFormSwitch = false;
        await RefreshData();
    }
}