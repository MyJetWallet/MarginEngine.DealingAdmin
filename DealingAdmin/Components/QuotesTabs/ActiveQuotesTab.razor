@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.BidAsk
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.QuotesFeedRouter.Abstractions
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Common.MyNoSql.DefaultValues

@inject IInstrumentsCache InstrumentsCache
@inject ILiquidityProviderReader LpReader
@inject IQuoteSourceService QuoteSourceService
@inject IDefaultLiquidityProviderWriter DefaultLpWriter

<div id="ActiveQuotesRegion">    
  <Table DataSource="@GridData"
           TItem="TradingInstrumentAssetGroupModel"
           Bordered="@true"
           Loading="@isLoading"
           PageSize="999999"
           HidePagination="@true"
           ScrollY="calc(100vh - 160px)">
        <RowTemplate> 
            <AntDesign.Column Title="Instrument"
                    Field="@context.Name"
                    TData="string"
                    Width="140"
                    Sortable
                    Filterable/>
            <AntDesign.Column Title="Asset Group"
                    Field="@context.AssetGroup"
                    TData="InstrumentAssetGroup"
                    Width="200"
                    Sortable
                    Filterable>
                    <span>@context.AssetGroupName</span>
            </AntDesign.Column>
            <AntDesign.Column Title="Quotes"  
                    Field="@context.Id">
                <TitleTemplate>
                    <div class="grid-container-lp-quote-line">
                        <div></div>
                        <div></div>
                        <div>Bid</div>
                        <div></div>
                        <div>Ask</div>
                        <div></div>
                        <div>Spread</div>
                        <div></div>
                        <div>DateTime</div>
                    </div>
                </TitleTemplate>
                <ChildContent>
                    <InstrumentAllQuotes
                        Instrument="context"
                        ProvidersList="@liquidityProvidersList"
                        ActiveProviderId="@dictInstrumentProviderMaps[context.Id]"/>
                </ChildContent>               
            </AntDesign.Column>
        </RowTemplate>
    </Table>
</div>
 
@code {

    public List<TradingInstrumentAssetGroupModel> GridData
    = new List<TradingInstrumentAssetGroupModel>();

    private List<string> liquidityProvidersList = new List<string>();

    private Dictionary<string, string> dictInstrumentProviderMaps
        = new Dictionary<string, string>();

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        AppJobService.CommonUpdateEvent += async () => await InvokeAsync(() => RefreshData());
    }

    private async Task RefreshData()
    {
        if (isLoading)
        {
            return;
        }

        isLoading = true;

        liquidityProvidersList = (await LpReader.GetLiquidityProviders()).ToList();

        GridData = GetActiveInstruments(InstrumentsCache.GetAll())
            .Select(x => TradingInstrumentAssetGroupModel.Create(x)).ToList();

        var sourceMaps = (await QuoteSourceService.GetInstrumentSourcesMaps()).ToList();

        foreach(var instr in GridData)
        {
            var overwrittenProviderId = sourceMaps.FirstOrDefault(x => x.InstrumentId == instr.Id);

            var providerId =  overwrittenProviderId != null
                ? overwrittenProviderId.SourceId
                : await DefaultLpWriter.GetAsync();

            dictInstrumentProviderMaps.Add(instr.Id, providerId);
        }

        this.StateHasChanged();

        isLoading = false;
    }

    private List<ITradingInstrument> GetActiveInstruments(IEnumerable<ITradingInstrument> instruments)
    {
        var activeInstruments = new List<ITradingInstrument>();
        var dtNow = DateTime.UtcNow;

        // filter out the non-trading instruments by day-offs
        foreach (var inst in instruments)
        {
            if (inst.TradingDisabled)
            {
                continue;
            }

            if (inst.DaysOff == null || !inst.DaysOff.Any()) {
                activeInstruments.Add(inst);
                continue;
            }

            foreach (var dayOff in inst.DaysOff)
            {
                if (CommonUtils.IsDateBelongToDayOff(dtNow, dayOff))
                {
                    continue;
                }
            }

            activeInstruments.Add(inst);
        }

        return activeInstruments;
    }
}
