@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.InstrumentSettings.Dialogs
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup

@inject IInstrumentSubGroupsRepository _subGroupsRepository;
@inject IInstrumentGroupsRepository _groupsRepository;
@inject ITradingInstrumentsRepository _instrumentsRepository;

<PageHeader Class="site-page-header" Title="Trading profiles">
    <PageHeaderExtra>
        <Button @OnClick="ShowNewInstrumentDialog" Type="@ButtonType.Primary">New Instrument</Button>
    </PageHeaderExtra>
</PageHeader>
<Table DataSource="@tradingInstruments"
       TItem="TradingInstrumentModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 260px)"
       PageSize="999">
    <RowTemplate>
        <Column Title="" TData="string">
            <div>
                @if (String.IsNullOrEmpty(context.SwapScheduleId))
                {
                    <i class="material-icons color-red font-18">warning_amber</i>
                }
            </div>
        </Column>
        <Column Title="Group"
                TData="string"
                DataIndex="GroupId"
                Sortable
                Filterable/>            
        <Column Title="Id"
                TData="string"
                DataIndex="Id"
                Sortable>
            <p>Id: @context.Id</p>
            <p>Name: @context.Name</p>
        </Column>
        <Column Title="Weight"
            TData="int?"
            DataIndex="Weight"
            Sortable/>
        <Column Title="Sub group" 
                DataIndex="SubGroupId" 
                TData="string"
                Sortable
                Filterable/>
        <Column Title="Avatar" 
                TData="string">
            <Avatar Size="64" Icon="user"/>
        </Column>
        <Column Title="Base"
                DataIndex="Base" 
                TData="string"
                Sortable
                Filterable/>
        <Column Title="Quote"
                DataIndex="Quote"
                TData="string"
                Sortable
                Filterable/>
        <Column Title="Digits" 
                DataIndex="Digits" 
                TData="int"
                Sortable
                Filterable/>
        <Column Title="Swap"
                DataIndex="SwapScheduleId"
                TData="string"/>
        <Column Title="TickSize"
                DataIndex="TickSize"
                TData="double"
                Sortable
                Filterable/>
        <Column Title="Time off" TData="string">
            @string.Join("\n", context.DaysOff
                .Select(x => $"{x.DowFrom}:{x.TimeFrom} - {x.DowTo}:{x.TimeTo}"))
        </Column>
        <Column Title="On/Off" Field="@context.TradingDisabled">
            <Switch @bind-Value="@context.TradingDisabled"></Switch>
        </Column>
        <Column Title="Timeout" TData="string">
            Night: <Tag PresetColor="PresetColor.Purple">@context.NightTimeout</Tag>
            Day: <Tag PresetColor="PresetColor.GeekBlue">@context.DayTimeout</Tag>
        </Column>        
        <ActionColumn Title="Edit" Width="60">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
        </ActionColumn>
    </RowTemplate>
</Table>
   


@if (isEditInstrumentDialogVisible)
{
    <TradingInstrumentCrudForm InstrumentGroups="instrumentGroups" SubGroups="instrumentSubGroups" OnSubmit="HandleAddInstrument" OnClose="@CloseEditInstrumentDialog"/>
}

@code {
    private IEnumerable<TradingInstrumentModel> tradingInstruments;
    private IEnumerable<InstrumentGroupModel> instrumentGroups;
    private IEnumerable<InstrumentSubGroupModel> instrumentSubGroups;

    int _pageSize = 999;

    private bool isLoading = false;
    private bool stopPriceRefresh = false;
    private bool isUpdateBalanceDialogVisible = false;
    private bool isUpdateTradingGroupDialogVisible = false;

    private TradingInstrumentModel editedInstrument;
    private bool isEditInstrumentDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        instrumentSubGroups = (await _subGroupsRepository.GetAllAsync()).Select(InstrumentSubGroupModel.Create);
        instrumentGroups = (await _groupsRepository.GetAllAsync()).Select(InstrumentGroupModel.Create);
        tradingInstruments = (await _instrumentsRepository.GetAllAsync()).Select(TradingInstrumentModel.Create);

        await base.OnInitializedAsync();
    }

    private async void ShowNewInstrumentDialog()
    {
        editedInstrument = new TradingInstrumentModel();
        isEditInstrumentDialogVisible = true;
    }

    private async void ShowEditInstrumentDialog(TradingInstrumentModel instrument)
    {
        editedInstrument = instrument;
        isEditInstrumentDialogVisible = true;
    }

    private void CloseEditInstrumentDialog()
    {
       
        isEditInstrumentDialogVisible = false;
    }

    private async void HandleAddInstrument(TradingInstrumentModel instrument)
    {
        // await _instrumentsRepository.UpdateAsync(instrument);
        //tradingInstruments = (await _instrumentsRepository.GetAllAsync()).Select(TradingInstrument.Create);
        StateHasChanged();
    }
}