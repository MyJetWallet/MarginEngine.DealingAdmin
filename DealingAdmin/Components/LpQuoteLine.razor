@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Services
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.BidAsk


@inject IPriceRetriever priceRetriever


<div class="grid-container-lp-quote-line">
    <div>
        @if (bidAsk != null)
        {
            <span class="material-icons icon-red">warning</span>
        }
    </div>
    <div><span class="@(providerTextClass)">@ProviderId</span></div>
    <div>@bidAsk?.Bid.ToString($"F{digits}")</div>
    <div><span class="@(providerTextClass)">@ProviderId</span></div>
    <div>@bidAsk?.Ask.ToString($"F{digits}")</div>
    <div><span class="@(providerTextClass)">@ProviderId</span></div>
    <div>@spread</div>
    <div><span class="@(providerTextClass)">@ProviderId</span></div>
    <div>@bidAsk?.Date 
        @if (bidAsk != null && bidAsk.TimeWarning)
        {
            <span class="material-icons icon-yellow">warning</span>
        }
    </div>
</div>

@code {
    [Parameter]
    public InstrumentQuoteModel Instrument { get; set; }

    [Parameter]
    public string ProviderId { get; set; }

    [Parameter]
    public bool IsDefaultProvider { get; set; }

    private UnfilteredBidAskModel bidAsk = new UnfilteredBidAskModel();

    private bool isUpdating = false;

    private int digits = 2;
    private int spread;
    private string providerTextClass = String.Empty;
    private bool showTimeWarning = false;

    protected override async Task OnInitializedAsync()
    {
        digits = Instrument.Digits;
        providerTextClass = IsDefaultProvider ? "color-teal" : "";

        AppJobService.QuotesUpdateEvent += async () => await InvokeAsync(() => UpdateBidAsk());
    } 

    private void UpdateBidAsk()
    {
        if (isUpdating)
        {
            return;
        }

        isUpdating = true;

        var currentBidAsk = priceRetriever.GetUnfilteredBidAsk(Instrument.Id, ProviderId);

        if (currentBidAsk != null)
        {
            SetBidAsk(currentBidAsk);
        }

        isUpdating = false;      
    }

    public void SetBidAsk(UnfilteredBidAskModel bidAskNow)
    {
        bidAsk = bidAskNow;
        spread = FxUtils.CalcSpread(bidAskNow, digits);
        this.StateHasChanged();
    }
}
