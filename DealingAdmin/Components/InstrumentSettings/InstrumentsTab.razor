@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.InstrumentSettings.Dialogs
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup

@inject IInstrumentSubGroupsRepository SubGroupsRepository;
@inject IInstrumentGroupsRepository GroupsRepository;
@inject ITradingInstrumentsRepository InstrumentsRepository;
@inject IUserMessageService MessageService
@inject Logger logger

<PageHeader Class="m-0 p-0" Title="Instruments">
    <PageHeaderExtra>
        <Button OnClick="ShowNewInstrumentDialog" Type="@ButtonType.Primary">New Instrument</Button>
    </PageHeaderExtra>
</PageHeader>
<Table DataSource="@tradingInstruments"
       TItem="TradingInstrumentModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 260px)"
       PageSize="999">
    <RowTemplate>
        <Column Title="Group"
                TData="string"
                DataIndex="GroupId"
                Sortable
                Filterable
                Width="90"/>            
        <Column Title="Id"
                TData="string"
                DataIndex="Id"
                Sortable
                Width="90">
            <p>Id: @context.Id</p>
            <p>Name: @context.Name</p>
        </Column>
        <Column Title="Weight"
            TData="int?"
            DataIndex="Weight"
            Sortable
            Width="80"/>
        <Column Title="Sub group" 
                DataIndex="SubGroupId" 
                TData="string"
                Sortable
                Filterable
                Width="120"/>
        <Column Title="Avatar" 
                TData="string"
                Width="60">
            <Avatar Size="48" Icon="user"/>
        </Column>
        <Column Title="Base"
                DataIndex="Base" 
                TData="string"
                Sortable
                Filterable
                Width="66"/>
        <Column Title="Quote"
                DataIndex="Quote"
                TData="string"
                Sortable
                Filterable
                Width="66"/>
        <Column Title="Digits" 
                DataIndex="Digits" 
                TData="int"
                Sortable
                Filterable
                Width="66"/>
        <Column Title="Swap"
                DataIndex="SwapScheduleId"
                TData="string"
                Width="60">
            @if (String.IsNullOrEmpty(context.SwapScheduleId))
            {
                <i class="material-icons color-red font-18">warning_amber</i>
            }
            else
            {
                <span>@context.SwapScheduleId</span>
            }
        </Column>
        <Column Title="Time off"
                TData="string">
            @string.Join("\n", context.DaysOff
                .Select(x => $"{x.DowFrom}:{x.TimeFrom} - {x.DowTo}:{x.TimeTo}"))
        </Column>
        <Column Title="On/Off"
                TData="bool"
                Field="@context.TradingDisabled"
                Sortable
                Width="66">
            <Switch @bind-Value="@context.TradingDisabled"></Switch>
        </Column>
        <Column Title="Timeout"
                TData="string" 
                Width="66">
            Night:<Tag PresetColor="PresetColor.Purple">@context.NightTimeout</Tag>
            Day:<Tag PresetColor="PresetColor.GeekBlue">@context.DayTimeout</Tag>
        </Column>        
        <ActionColumn Title="Edit" Width="50">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
        </ActionColumn>
    </RowTemplate>
</Table>
   
<Modal Title="@instrumentEditFormTitle"
       Visible="@isEditInstrumentDialogVisible"
       ConfirmLoading="@true"
       OkText="@("Save")"
       OnOk="()=>SaveInstrument()"
       OnCancel="()=>CloseEditInstrumentDialog()">
    <TradingInstrumentEditForm
        @bind-Instrument="editedInstrument"
        InstrumentGroups="instrumentGroups" 
        SubGroups="instrumentSubGroups"/>   
</Modal>

@code {
    private IEnumerable<TradingInstrumentModel> tradingInstruments;
    private IEnumerable<InstrumentGroupModel> instrumentGroups;
    private IEnumerable<InstrumentSubGroupModel> instrumentSubGroups;

    int _pageSize = 999;

    private bool isLoading = false;
    private bool stopPriceRefresh = false;
    private bool isUpdateBalanceDialogVisible = false;
    private bool isUpdateTradingGroupDialogVisible = false;

    private TradingInstrumentModel editedInstrument;
    private string instrumentEditFormTitle;
    private bool isEditInstrumentDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        instrumentSubGroups = (await SubGroupsRepository.GetAllAsync()).Select(InstrumentSubGroupModel.Create);
        instrumentGroups = (await GroupsRepository.GetAllAsync()).Select(InstrumentGroupModel.Create);
        tradingInstruments = (await InstrumentsRepository.GetAllAsync()).Select(TradingInstrumentModel.Create);

        await base.OnInitializedAsync();
    }

    private void ShowNewInstrumentDialog()
    {
        instrumentEditFormTitle = "Add New Instrument";
        editedInstrument = new TradingInstrumentModel();
        isEditInstrumentDialogVisible = true;
    }

    private void ShowEditInstrumentDialog(TradingInstrumentModel instrument)
    {
        instrumentEditFormTitle = $"Edit '${instrument.Name}' Instrument";
        editedInstrument = instrument;
        isEditInstrumentDialogVisible = true;
    }

    private void CloseEditInstrumentDialog()
    {
        isEditInstrumentDialogVisible = false;
        editedInstrument = new TradingInstrumentModel();
    }

    private async void SaveInstrument()
    {
        try
        {
            await InstrumentsRepository.UpdateAsync(editedInstrument);
            tradingInstruments = (await InstrumentsRepository.GetAllAsync()).Select(TradingInstrumentModel.Create);
            await MessageService.SuccessAsync("Instrument saved");
            StateHasChanged();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            await MessageService.ErrorAsync($"Error occured: {ex.Message}");
        }
    }
}