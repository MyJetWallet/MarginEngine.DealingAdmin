@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Microsoft.AspNetCore.Components
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup
@using System.ComponentModel.DataAnnotations

@inject IInstrumentGroupsRepository groupsRepository;
@inject ISnackbar snackbar
@inject Logger logger

<Form @ref="editForm"
      Model="InstrumentGroup"
      ValidateOnChange="@true"
      ValidateMode="@FormValidateMode.Rules"
      LabelColSpan="6"
      WrapperColSpan="12">
    <Validator>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </Validator>
    <ChildContent>
        <FormItem Label="Group Id" Required Rules=@RequiredRule>
             <Input @bind-Value="@context.Id" Placeholder="Group Id" Disabled="@(!String.IsNullOrEmpty(context.Id))"/>
        </FormItem>           
        <FormItem Label="Name" Required Rules=@RequiredRule>
            <Input @bind-Value="@context.Name" Placeholder="Name" />
        </FormItem>
        <FormItem Label="Weight" Required Rules=@RequiredRule>
            <AntDesign.InputNumber @bind-Value="@context.Weight"/>
        </FormItem>
        <FormItem>
            <AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="SaveGroup">
                Save
            </AntDesign.Button>
            <AntDesign.Button OnClick="CloseDialog">
                Cancel
            </AntDesign.Button>
        </FormItem>
    </ChildContent>
</Form>
 
@code {
    [Parameter]
    public InstrumentGroupModel InstrumentGroup { get; set; } = new();

    [Parameter]
    public EventCallback OnFinish { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };

    AntDesign.Form<InstrumentGroupModel> editForm;

    private async void CloseDialog()
    {
        await OnCancel.InvokeAsync();
    }

    private async void SaveGroup()
    {
        try
        {
            if (!editForm.Validate())
            {
                return;
            }

            await groupsRepository.UpdateAsync(InstrumentGroup);
            await OnFinish.InvokeAsync();
            snackbar.Add($"Trading Group {InstrumentGroup.Id} saved", Severity.Success);
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }
}
