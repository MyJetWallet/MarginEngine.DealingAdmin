@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models

@inject LiveDemoServiceMapper _liveDemoServiceMapper
@inject NavigationManager _navigationManager

@if (TradingProfile != null)
{
    <div style="background-color: #f5f5f5" class="site-page-header-ghost-wrapper">
        <PageHeader Ghost="true">
            <PageHeaderTitle>Add New Trading Profile</PageHeaderTitle>
            <PageHeaderContent>
                <div>
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <Text>Id</Text>
                            <input @bind="TradingProfile.Id" type="text" class="form-control" placeholder="Id">
                        </div>
                        <div class="form-group col-md-2">
                            <Text>Margin call %</Text>
                            <input @bind="TradingProfile.MarginCallPercent" type="number" class="form-control" placeholder="Margin call %">
                        </div>
                        <div class="form-group col-md-2">
                            <Text>Stop out %</Text>
                            <input @bind="TradingProfile.StopOutPercent" type="number" class="form-control" placeholder="Stop out %">
                        </div>
                        <div class="form-group col-md-2">
                            <Text>Topping up %</Text>
                            <input @bind="TradingProfile.PositionToppingUpPercent" type="number" class="form-control" placeholder="Topping up %">
                        </div>
                        <div class="form-group col-md-3">
                            <Button OnClick="@(HandleTradingProfileSubmit)" Type="@ButtonType.Primary">Submit</Button>
                        </div>
                    </div>
                </div>
            </PageHeaderContent>
        </PageHeader>
    </div>
}
<br/>

<div style="background-color: #f5f5f5" class="site-page-header-ghost-wrapper">
    <PageHeader Ghost="true">
        <PageHeaderExtra>
            <Button OnClick="@(() => IsActiveAddDrawer = true)" Type="@ButtonType.Primary">Add new profile instrument</Button>
        </PageHeaderExtra>
        <PageHeaderTitle>Trading profile instrument</PageHeaderTitle>
    </PageHeader>
</div>

<Table DataSource="@TradingProfileInstruments" OnChange="@(() => {})" TItem="TradingProfileInstrumentModel">
    <Column Title="Id" DataIndex="Id" TData="string"/>
    <Column TData="string" Title="Operations volume">
        <p>Max: <Tag PresetColor="@PresetColor.Red">@context.MaxOperationVolume</Tag></p>
        <p>Min: <Tag PresetColor="@PresetColor.Green">@context.MinOperationVolume</Tag></p>
    </Column>
    <Column Title="Max position volume" DataIndex="MaxOperationVolume" TData="int" SorterMultiple="2" SorterCompare="(a, b) => a - b"/>

    <Column TData="string" Title="Position delays">
        <p>Max: <Tag PresetColor="@PresetColor.Red">@context.OpenPositionMaxDelayMs ms</Tag></p>
        <p>Min: <Tag PresetColor="@PresetColor.Green">@context.OpenPositionMinDelayMs ms</Tag></p>
    </Column>

    <Column Title="Leverages" TData="string">
        @string.Join(", ", context.Leverages.Select(itm => itm.ToString()))
    </Column>

    <Column Title="Stop out percent" DataIndex="StopOutPercent" TData="int" SorterMultiple="2" SorterCompare="(a, b) => a - b"/>
</Table>

@if (IsActiveAddDrawer)
{
    <AddTradingProfileInstrumentDrawer OnSubmit="OnSubmitProfileInstrument" OnClose="@OnModelClose"/>
}


@code {

    [Parameter]
    public TradingProfileModel TradingProfile { get; set; }
    
    [CascadingParameter(Name = "liveDemoContext")]
    public bool LiveDemo { get; set; }

    private void OnModelClose()
    {
        IsActiveAddDrawer = false;
        StateHasChanged();
    }

    public bool IsActiveAddDrawer = false;

    private TradingProfileInstrumentModel[] TradingProfileInstruments
        => TradingProfile?.Instruments
            ?.Select(TradingProfileInstrumentModel.Create)
            .ToArray() ?? Array.Empty<TradingProfileInstrumentModel>();

    private bool _isNew = true;

    protected override Task OnInitializedAsync()
    {
        if (TradingProfile != null)
            _isNew = false;
        
        if (_isNew)
            TradingProfile = new TradingProfileModel();

        return base.OnInitializedAsync();
    }

    private async Task HandleTradingProfileSubmit()
    {
        await _liveDemoServiceMapper.GetContext(LiveDemo).TradingProfileRepository.UpdateAsync(TradingProfile);
        _navigationManager.NavigateTo("/TradingProfile");
    }

    void OnSubmitProfileInstrument(TradingProfileInstrumentModel model)
    {
        TradingProfile.Instruments ??= new List<TradingProfileInstrumentModel>();
        var list = new List<TradingProfileInstrumentModel>();
        list.AddRange(TradingProfile.Instruments.Select(TradingProfileInstrumentModel.Create));
        list.Add(model);
        IsActiveAddDrawer = false;
        TradingProfile.Instruments = list;
        StateHasChanged();
    }
}