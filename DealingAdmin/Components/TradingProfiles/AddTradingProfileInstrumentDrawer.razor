@using Newtonsoft.Json
@using DealingAdmin.Abstractions.Models
@using SimpleTrading.Abstraction.Trading.Instruments
<div>
    <Drawer Closable="true" Width="720" Visible="true" Title="@("Add trading profile instrument")" OnClose="_ => OnClose.Invoke()">
        <Template style="height:90%">
            <AntDesign.Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>Id</Text>
                    <Select @bind-Value="@InstrumentModel.Id"
                            TItemValue="string"
                            TItem="string">
                        <SelectOptions>
                            @foreach (var item in TradingInstruments)
                            {
                                <SelectOption TItemValue="string" TItem="string" Value=@item.Id Label=@item.Name/>
                            }
                        </SelectOptions>
                    </Select>

                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>Max position volume</Text>
                    <Input @bind-Value="InstrumentModel.MaxPositionVolume" Placeholder="Max position volume" TValue="double"/>
                </AntDesign.Col>
            </AntDesign.Row>
            <br/>
            <AntDesign.Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>Min operation volume</Text>
                    <Input @bind-Value="InstrumentModel.MinOperationVolume" Placeholder="Min operation volume" TValue="double"/>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>Max operation volume</Text>
                    <Input @bind-Value="InstrumentModel.MaxOperationVolume" Placeholder="Max operation volume" TValue="double"/>
                </AntDesign.Col>
            </AntDesign.Row>
            <br/>

            <AntDesign.Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>Open position min delay ms</Text>
                    <Input @bind-Value="InstrumentModel.OpenPositionMinDelayMs" Placeholder="Open position min delay" TValue="int"/>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>Open position max delay ms</Text>
                    <Input @bind-Value="InstrumentModel.OpenPositionMaxDelayMs" Placeholder="Open position max delay" TValue="int"/>
                </AntDesign.Col>
            </AntDesign.Row>
            <br/>

            <AntDesign.Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>Stop out %</Text>
                    <Input @bind-Value="InstrumentModel.StopOutPercent" Placeholder="Stop out%" TValue="double?"/>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>Leverages</Text>
                    <Select Mode="tags"
                            Placeholder="Please select"
                            @bind-Values="@_selectedValues"
                            TItemValue="int"
                            TItem="int"
                            OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                            EnableSearch>
                        <SelectOptions/>
                    </Select>
                </AntDesign.Col>
            </AntDesign.Row>

            <AntDesign.Button OnClick="@(() => OnSubmit(InstrumentModel))" Type="primary" Color="AntDesign.Color.Green1" Block>Add instrument</AntDesign.Button>
        </Template>
    </Drawer>
</div>


@code{

    IEnumerable<int> _selectedValues;

    [CascadingParameter]
    public IEnumerable<ITradingInstrument> TradingInstruments { get; set; }

    [Parameter]
    public TradingProfileInstrumentModel InstrumentModel { get; set; } = new();

    [Parameter]
    public Action OnClose { get; set; }

    [Parameter]
    public Action<TradingProfileInstrumentModel> OnSubmit { get; set; }

    protected override void OnInitialized()
    {
        _selectedValues = InstrumentModel?.Leverages ?? new int[] { };
        base.OnInitialized();
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<int> values)
    {
        if (values == null) return;
        var array = values.ToArray();
        _selectedValues = array.ToList();
        InstrumentModel.Leverages = array.ToArray();
    }

}